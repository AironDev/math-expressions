{"name":"Point3D","qualifiedName":"math_expressions/math_expressions.Point3D","comment":"<p>A point in 3-dimensional space.\nThis implementation supplies common mathematical operations on points.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"x":{"name":"x","qualifiedName":"math_expressions/math_expressions.Point3D.x","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"y":{"name":"y","qualifiedName":"math_expressions/math_expressions.Point3D.y","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]},"z":{"name":"z","qualifiedName":"math_expressions/math_expressions.Point3D.z","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"math_expressions/math_expressions.Point3D.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>math_expressions/math_expressions.Point3D.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"dart-core.Object.hashCode","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"math_expressions/math_expressions.Point3D.Point3D-","comment":"<p>Creates a new Point3D with the given coordinates.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]},"z":{"name":"z","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.double","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"vec":{"name":"vec","qualifiedName":"math_expressions/math_expressions.Point3D.Point3D-vec","comment":"<p>Creates a new Point3D from given vector3 / vector4.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"vec":{"name":"vec","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"splat":{"name":"splat","qualifiedName":"math_expressions/math_expressions.Point3D.Point3D-splat","comment":"<p>Creates a new Point3D and \"splats\" the given value to each coordinate.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"val":{"name":"val","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"zero":{"name":"zero","qualifiedName":"math_expressions/math_expressions.Point3D.Point3D-zero","comment":"<p>Creates a new Point3D at the coordinate origin.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{"+":{"name":"+","qualifiedName":"math_expressions/math_expressions.Point3D.+","comment":"<p>Returns a new point which position is determined by moving the old point\nalong the given vector.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"math_expressions/math_expressions.Point3D","inner":[]}],"parameters":{"v":{"name":"v","optional":false,"named":false,"default":false,"type":[{"outer":"vector_math.Vector3","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"-":{"name":"-","qualifiedName":"math_expressions/math_expressions.Point3D.-","comment":"<p>Returns the <a>math_expressions/vector_math.Vector3</a> pointing from the given point to this point.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"vector_math.Vector3","inner":[]}],"parameters":{"p2":{"name":"p2","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.Point3D","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"unary-":{"name":"unary-","qualifiedName":"math_expressions/math_expressions.Point3D.unary-","comment":"<p>Negates the point's components.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"math_expressions/math_expressions.Point3D","inner":[]}],"parameters":{},"annotations":[]},"==":{"name":"==","qualifiedName":"math_expressions/math_expressions.Point3D.==","comment":"<p>Checks for equality. Two points are considered equal, if their coordinates\nmatch.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"o":{"name":"o","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"lerp":{"name":"lerp","qualifiedName":"math_expressions/math_expressions.Point3D.lerp","comment":"<p>Performs a linear interpolation between two points.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"math_expressions/math_expressions.Point3D","inner":[]}],"parameters":{"p2":{"name":"p2","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.Point3D","inner":[]}],"value":"null","annotations":[]},"coeff":{"name":"coeff","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"toVec3":{"name":"toVec3","qualifiedName":"math_expressions/math_expressions.Point3D.toVec3","comment":"<p>Transforms the point to its vector representation.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"vector_math.Vector3","inner":[]}],"parameters":{},"annotations":[]},"toVec4":{"name":"toVec4","qualifiedName":"math_expressions/math_expressions.Point3D.toVec4","comment":"<p>Transforms the point to its homogeneous vector4 representation.\nThe w component is set to 1.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"vector_math.Vector4","inner":[]}],"parameters":{},"annotations":[]},"toString":{"name":"toString","qualifiedName":"math_expressions/math_expressions.Point3D.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"math_expressions/math_expressions.Point3D.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>math_expressions/math_expressions.Point3D.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"math_expressions/math_expressions.Point3D.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"math_expressions/math_expressions.Point3D.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>math_expressions/math_expressions.Point3D.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>math_expressions/math_expressions.Point3D.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"math_expressions/math_expressions.Point3D.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"math_expressions/math_expressions.Point3D.noSuchMethod","comment":"<p><a>math_expressions/math_expressions.Point3D.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>math_expressions/math_expressions.Point3D.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>math_expressions/math_expressions.Point3D.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>math_expressions/math_expressions.Point3D.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}