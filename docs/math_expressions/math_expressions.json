{"name":"math_expressions","qualifiedName":"math_expressions/math_expressions","comment":"<p>A math library for parsing and evaluating expressions in real, interval and\nvector contexts. It also supports simplification and differentiation of\nexpressions.</p>\n<p>The libary supports the three basic data types <a>math_expressions/math_expressions.Number</a>, <a>math_expressions/math_expressions.Interval</a> and\n<a>math_expressions/math_expressions.Vector</a>. It includes a <a>math_expressions/math_expressions.Parser</a> to create <a>math_expressions/math_expressions.Expression</a>s from Strings.</p>","variables":{},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{}},"classes":{"class":[{"name":"ContextModel","qualifiedName":"math_expressions/math_expressions.ContextModel","preview":"<p>The context model keeps track of all known variables and functions.</p>"},{"name":"EvaluationType","qualifiedName":"math_expressions/math_expressions.EvaluationType","preview":"<p>Mathematical expressions must be evaluated under a certain <a>math_expressions/math_expressions.EvaluationType</a>.</p>"},{"name":"TokenType","qualifiedName":"math_expressions/math_expressions.TokenType","preview":"<p>A token type. Access token types via the static fields.</p>"},{"name":"Token","qualifiedName":"math_expressions/math_expressions.Token","preview":"<p>A Token consists of text and has a <a>math_expressions/math_expressions.TokenType</a>.</p>"},{"name":"Lexer","qualifiedName":"math_expressions/math_expressions.Lexer","preview":"<p>The lexer creates tokens (see <a>math_expressions/math_expressions.TokenType</a> and <a>math_expressions/math_expressions.Token</a>) from an input string.\nThe input string is expected to be in\n<a href=\"https://en.wikipedia.org/wiki/Infix_notation\">infix notation form</a>.\nThe lexer can convert an infix stream into a\n<a href=\"https://en.wikipedia.org/wiki/Reverse_Polish_notation\">postfix stream</a>\n(Reverse Polish Notation) for further processing by a <a>math_expressions/math_expressions.Parser</a>.</p>"},{"name":"Parser","qualifiedName":"math_expressions/math_expressions.Parser","preview":"<p>The Parser creates a mathematical <a>math_expressions/math_expressions.Expression</a> from a given input string.</p>"},{"name":"Tan","qualifiedName":"math_expressions/math_expressions.Tan","preview":"<p>The tangens function.</p>"},{"name":"Cos","qualifiedName":"math_expressions/math_expressions.Cos","preview":"<p>The cosine function.</p>"},{"name":"Sin","qualifiedName":"math_expressions/math_expressions.Sin","preview":"<p>The sine function.</p>"},{"name":"Sqrt","qualifiedName":"math_expressions/math_expressions.Sqrt","preview":"<p>The square root function.</p>"},{"name":"Root","qualifiedName":"math_expressions/math_expressions.Root","preview":"<p>The n-th root function. n needs to be a natural number.</p>"},{"name":"Ln","qualifiedName":"math_expressions/math_expressions.Ln","preview":"<p>The natural logarithm (log based e).</p>"},{"name":"Log","qualifiedName":"math_expressions/math_expressions.Log","preview":"<p>The logarithm function.</p>"},{"name":"Exponential","qualifiedName":"math_expressions/math_expressions.Exponential","preview":"<p>The exponential function.</p>"},{"name":"DefaultFunction","qualifiedName":"math_expressions/math_expressions.DefaultFunction","preview":"<p>A default function is predefined in this library.\nIt contains no expression, because the appropriate Evaluator knows\nhow to handle them.</p>"},{"name":"CustomFunction","qualifiedName":"math_expressions/math_expressions.CustomFunction","preview":"<p>Any user-created function is a CustomFunction.</p>"},{"name":"CompositeFunction","qualifiedName":"math_expressions/math_expressions.CompositeFunction","preview":"<p>A composition of two given <a>math_expressions/math_expressions.MathFunction</a>s.</p>"},{"name":"MathFunction","qualifiedName":"math_expressions/math_expressions.MathFunction","preview":"<p>A function with an arbitrary number of arguments.</p>"},{"name":"IntervalLiteral","qualifiedName":"math_expressions/math_expressions.IntervalLiteral","preview":"<p>An interval literal.</p>"},{"name":"BoundVariable","qualifiedName":"math_expressions/math_expressions.BoundVariable","preview":"<p>A bound variable is an anonymous variable, e.g. a variable without name,\nwhich is bound to an expression.</p>"},{"name":"Variable","qualifiedName":"math_expressions/math_expressions.Variable","preview":"<p>A variable is a named literal.</p>"},{"name":"Vector","qualifiedName":"math_expressions/math_expressions.Vector","preview":"<p>A vector of arbitrary size.</p>"},{"name":"Number","qualifiedName":"math_expressions/math_expressions.Number","preview":"<p>A number is a constant number literal.</p>"},{"name":"Literal","qualifiedName":"math_expressions/math_expressions.Literal","preview":"<p>A literal can be a number, a constant or a variable.</p>"},{"name":"Power","qualifiedName":"math_expressions/math_expressions.Power","preview":"<p>The power operator.</p>"},{"name":"Divide","qualifiedName":"math_expressions/math_expressions.Divide","preview":"<p>The divide operator performs a division.</p>"},{"name":"Times","qualifiedName":"math_expressions/math_expressions.Times","preview":"<p>The times operator performs a multiplication.</p>"},{"name":"Minus","qualifiedName":"math_expressions/math_expressions.Minus","preview":"<p>The minus operator performs a subtraction.</p>"},{"name":"Plus","qualifiedName":"math_expressions/math_expressions.Plus","preview":"<p>The plus operator performs an addition.</p>"},{"name":"UnaryMinus","qualifiedName":"math_expressions/math_expressions.UnaryMinus","preview":"<p>The unary minus negates its argument.</p>"},{"name":"UnaryOperator","qualifiedName":"math_expressions/math_expressions.UnaryOperator","preview":"<p>A unary operator takes one argument and performs an operation on it.</p>"},{"name":"BinaryOperator","qualifiedName":"math_expressions/math_expressions.BinaryOperator","preview":"<p>A binary operator takes two expressions and performs an operation on them.</p>"},{"name":"Expression","qualifiedName":"math_expressions/math_expressions.Expression","preview":"<p>Any Expression supports basic mathematical operations like\naddition, subtraction, multiplication, division, power and negate.</p>"},{"name":"Interval","qualifiedName":"math_expressions/math_expressions.Interval","preview":"<p>An <a>math_expressions/math_expressions.Interval</a> is defined by its minimum and maximum values, where\n<em>min &lt;= max</em>.</p>"},{"name":"Point3D","qualifiedName":"math_expressions/math_expressions.Point3D","preview":"<p>A point in 3-dimensional space.\nThis implementation supplies common mathematical operations on points.</p>"}],"typedef":{},"error":[]},"packageName":"math_expressions","packageIntro":"<h1>math_expressions</h1>\n<p>A math library for parsing and evaluating expressions in real, interval and\nvector contexts. Also supports simplification and differentiation.</p>\n<p>It is partly inspired by <a href=\"http://www-sfb288.math.tu-berlin.de/~jtem/mathExpr/\">mathExpr</a> for Java.</p>\n<p><strong>Note:</strong> This library is still in an early state, the test coverage is not\nperfect, the performance is not optimized and some features are still\nunimplemented. Most REAL and basic INTERVAL and VECTOR evaluations should work\nthough. Suggestions and pull requests are always welcome!</p>\n<p><a href=\"https://drone.io/github.com/fkleon/math-expressions/latest\">!<a href=\"https://drone.io/github.com/fkleon/math-expressions/status.png\">Build Status</a></a></p>\n<h2>Features</h2><ul><li>Parsing, simplification and differentiation of mathematical expressions.</li><li>Evaluation of expressions in various modes (Real, Vector, Interval).</li><li>Supporting most basic functions out of the box.</li><li>Well documented.</li></ul>\n<h3>What's not working yet?</h3><ul><li>Some evaluations in vector and interval space (especially functions).</li><li>Parser only works for real numbers.</li><li>Complex numbers.</li></ul>\n<h2>Documentation</h2>\n<p>See the <a href=\"http://fkleon.github.io/math-expressions/\">DartDocs</a> and the example code. For even more details,\nhave a look into the unit tests.</p>\n<h2>Examples</h2>\n<h3>1. Expression creation and evaluation</h3>\n<p>This example shows how to evaluate</p>\n<p>!<a href=\"http://latex.codecogs.com/gif.latex?%28x%5E2%2Bcos%28y%29%29%2F3\">Equation 1</a></p>\n<p>for\n!<a href=\"http://latex.codecogs.com/gif.latex?x%3D2%2Cy%3D%5Cpi\">xy</a></p>\n<h4>Build the expression</h4>\n<p>You can either create an mathematical expression programmatically or parse a string.</p><ul><li>Create the expression programmatically:</li></ul>\n<pre class=\"dart\"><code>  Variable x = new Variable('x'), y = new Variable('y');\n  Power xSquare = new Power(x, 2);\n  Cos yCos = new Cos(y);\n  Number three = new Number(3.0);\n  Expression exp = (xSquare + yCos) / three;\n</code></pre><ul><li>Create the expression via the parser:</li></ul>\n<pre class=\"dart\"><code>  Parser p = new Parser();\n  Expression exp = p.parse(\"(x^2 + cos(y)) / 3\");\n</code></pre>\n<h4>Evaluate the expression</h4><ul><li>Bind variables and evaluate the expression as real number:</li></ul>\n<pre class=\"dart\"><code>  // Bind variables:\n  ContextModel cm = new ContextModel();\n  cm.bindVariable(x, new Number(2.0));\n  cm.bindVariable(y, new Number(Math.PI));\n  \n  // Evaluate expression:\n  double eval = exp.evaluate(EvaluationType.REAL, cm);\n\n  print(eval) // = 1.0\n</code></pre>\n<h3>2. Expression simplification and differentiation</h3>\n<p>This example shows how to simplify and differentiate</p>\n<p>!<a href=\"http://latex.codecogs.com/gif.latex?x*1-%28-5%29\">Example 2</a></p><ul><li>Expressions can be simplified and differentiated with respect to a given variable:</li></ul>\n<pre class=\"dart\"><code>  Expression exp = p.parse(\"x*1 - (-5)\");\n\n  print(exp);            // = ((x * 1.0) - -(5.0))\n  print(exp.simplify()); // = (x + 5.0)\n\n  Expression expDerived = exp.derive('x');\n  \n  print(expDerived);            // = (((x * 0.0) + (1.0 * 1.0)) - -(0.0))\n  print(expDerived.simplify()); // = 1.0\n</code></pre>\n<p>For a CLI evaluator, see <a href=\"example/cli_evaluator.dart\">cli_evaluator.dart</a>.  \nFor more code, see <a href=\"example/example.dart\">example.dart</a>.</p>\n<p><em>math_expressions is distributed under the MIT license as described in the <a href=\"LICENSE\">LICENSE</a> file.</em></p>"}