{"name":"IntervalLiteral","qualifiedName":"math_expressions/math_expressions.IntervalLiteral","comment":"<p>An interval literal.</p>","isAbstract":false,"superclass":"math_expressions/math_expressions.Literal","implements":[],"subclass":[],"variables":{"min":{"name":"min","qualifiedName":"math_expressions/math_expressions.IntervalLiteral.min","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"math_expressions/math_expressions.Expression","inner":[]}],"annotations":[]},"max":{"name":"max","qualifiedName":"math_expressions/math_expressions.IntervalLiteral.max","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"math_expressions/math_expressions.Expression","inner":[]}],"annotations":[]}},"inheritedVariables":{"value":{"name":"value","qualifiedName":"math_expressions/math_expressions.Literal.value","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]}},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"math_expressions/math_expressions.IntervalLiteral.IntervalLiteral-","comment":"<p>Creates a new interval with given borders.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"min":{"name":"min","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.Expression","inner":[]}],"value":"null","annotations":[]},"max":{"name":"max","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.Expression","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"fromSingle":{"name":"fromSingle","qualifiedName":"math_expressions/math_expressions.IntervalLiteral.IntervalLiteral-fromSingle","comment":"<p>Creates a new interval with identical borders.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"exp":{"name":"exp","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.Expression","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"derive":{"name":"derive","qualifiedName":"math_expressions/math_expressions.IntervalLiteral.derive","comment":"<p>Derives this expression with respect to the given variable.</p>","commentFrom":"math_expressions.Expression.derive","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"math_expressions/math_expressions.Expression","inner":[]}],"parameters":{"toVar":{"name":"toVar","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"simplify":{"name":"simplify","qualifiedName":"math_expressions/math_expressions.IntervalLiteral.simplify","comment":"<p>Returns a simplified version of this expression.\nSubclasses should overwrite this method, if applicable.</p>","commentFrom":"math_expressions.Expression.simplify","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"math_expressions/math_expressions.Expression","inner":[]}],"parameters":{},"annotations":[]},"evaluate":{"name":"evaluate","qualifiedName":"math_expressions/math_expressions.IntervalLiteral.evaluate","comment":"<p>Evaluates this expression according to given type and context.</p>","commentFrom":"math_expressions.Expression.evaluate","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.EvaluationType","inner":[]}],"value":"null","annotations":[]},"context":{"name":"context","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.ContextModel","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"math_expressions/math_expressions.IntervalLiteral.toString","comment":"","commentFrom":"math_expressions.Literal.toString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"isConstant":{"name":"isConstant","qualifiedName":"math_expressions/math_expressions.IntervalLiteral.isConstant","comment":"<p>Returns true, if this literal is a constant.</p>","commentFrom":"math_expressions.Literal.isConstant","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"getConstantValue":{"name":"getConstantValue","qualifiedName":"math_expressions/math_expressions.IntervalLiteral.getConstantValue","comment":"<p>Returns the constant value of this literal.\nThrows StateError if literal is not constant, check before usage with\n<code>isConstant()</code>.</p>","commentFrom":"math_expressions.Literal.getConstantValue","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"math_expressions/math_expressions.IntervalLiteral.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>math_expressions/math_expressions.IntervalLiteral.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"math_expressions/math_expressions.IntervalLiteral.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"math_expressions/math_expressions.IntervalLiteral.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>math_expressions/math_expressions.IntervalLiteral.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>math_expressions/math_expressions.IntervalLiteral.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"+":{"name":"+","qualifiedName":"math_expressions/math_expressions.IntervalLiteral.+","comment":"<p>Add operator. Creates a <a>math_expressions/math_expressions.Plus</a> expression.</p>","commentFrom":"","inheritedFrom":"math_expressions.Expression.+","static":false,"abstract":false,"constant":false,"return":[{"outer":"math_expressions/math_expressions.Expression","inner":[]}],"parameters":{"exp":{"name":"exp","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.Expression","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"-":{"name":"-","qualifiedName":"math_expressions/math_expressions.IntervalLiteral.-","comment":"<p>Subtract operator. Creates a <a>math_expressions/math_expressions.Minus</a> expression.</p>","commentFrom":"","inheritedFrom":"math_expressions.Expression.-","static":false,"abstract":false,"constant":false,"return":[{"outer":"math_expressions/math_expressions.Expression","inner":[]}],"parameters":{"exp":{"name":"exp","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.Expression","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"*":{"name":"*","qualifiedName":"math_expressions/math_expressions.IntervalLiteral.*","comment":"<p>Multiply operator. Creates a <a>math_expressions/math_expressions.Times</a> expression.</p>","commentFrom":"","inheritedFrom":"math_expressions.Expression.*","static":false,"abstract":false,"constant":false,"return":[{"outer":"math_expressions/math_expressions.Expression","inner":[]}],"parameters":{"exp":{"name":"exp","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.Expression","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"/":{"name":"/","qualifiedName":"math_expressions/math_expressions.IntervalLiteral./","comment":"<p>Divide operator. Creates a <a>math_expressions/math_expressions.Divide</a> expression.</p>","commentFrom":"","inheritedFrom":"math_expressions.Expression./","static":false,"abstract":false,"constant":false,"return":[{"outer":"math_expressions/math_expressions.Expression","inner":[]}],"parameters":{"exp":{"name":"exp","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.Expression","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"^":{"name":"^","qualifiedName":"math_expressions/math_expressions.IntervalLiteral.^","comment":"<p>Power operator. Creates a <a>math_expressions/math_expressions.Power</a> expression.</p>","commentFrom":"","inheritedFrom":"math_expressions.Expression.^","static":false,"abstract":false,"constant":false,"return":[{"outer":"math_expressions/math_expressions.Expression","inner":[]}],"parameters":{"exp":{"name":"exp","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.Expression","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"unary-":{"name":"unary-","qualifiedName":"math_expressions/math_expressions.IntervalLiteral.unary-","comment":"<p>Unary minus operator. Creates a <a>math_expressions/math_expressions.UnaryMinus</a> expression.</p>","commentFrom":"","inheritedFrom":"math_expressions.Expression.unary-","static":false,"abstract":false,"constant":false,"return":[{"outer":"math_expressions/math_expressions.Expression","inner":[]}],"parameters":{},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"math_expressions/math_expressions.IntervalLiteral.toString","comment":"<p>Returns a string version of this expression.\nSubclasses should override this method. The output should be kept\ncompatible with the <a>math_expressions/math_expressions.Parser</a>.</p>","commentFrom":"math_expressions.Expression.toString","inheritedFrom":"math_expressions.Literal.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"math_expressions/math_expressions.IntervalLiteral.noSuchMethod","comment":"<p><a>math_expressions/math_expressions.IntervalLiteral.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>math_expressions/math_expressions.IntervalLiteral.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>math_expressions/math_expressions.IntervalLiteral.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>math_expressions/math_expressions.IntervalLiteral.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"derive":{"name":"derive","qualifiedName":"math_expressions/math_expressions.IntervalLiteral.derive","comment":"<p>Derives this expression with respect to the given variable.</p>","commentFrom":"","inheritedFrom":"math_expressions.Expression.derive","static":false,"abstract":true,"constant":false,"return":[{"outer":"math_expressions/math_expressions.Expression","inner":[]}],"parameters":{"toVar":{"name":"toVar","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"simplify":{"name":"simplify","qualifiedName":"math_expressions/math_expressions.IntervalLiteral.simplify","comment":"<p>Returns a simplified version of this expression.\nSubclasses should overwrite this method, if applicable.</p>","commentFrom":"","inheritedFrom":"math_expressions.Expression.simplify","static":false,"abstract":false,"constant":false,"return":[{"outer":"math_expressions/math_expressions.Expression","inner":[]}],"parameters":{},"annotations":[]},"evaluate":{"name":"evaluate","qualifiedName":"math_expressions/math_expressions.IntervalLiteral.evaluate","comment":"<p>Evaluates this expression according to given type and context.</p>","commentFrom":"","inheritedFrom":"math_expressions.Expression.evaluate","static":false,"abstract":true,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.EvaluationType","inner":[]}],"value":"null","annotations":[]},"context":{"name":"context","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.ContextModel","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"isConstant":{"name":"isConstant","qualifiedName":"math_expressions/math_expressions.IntervalLiteral.isConstant","comment":"<p>Returns true, if this literal is a constant.</p>","commentFrom":"","inheritedFrom":"math_expressions.Literal.isConstant","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"getConstantValue":{"name":"getConstantValue","qualifiedName":"math_expressions/math_expressions.IntervalLiteral.getConstantValue","comment":"<p>Returns the constant value of this literal.\nThrows StateError if literal is not constant, check before usage with\n<code>isConstant()</code>.</p>","commentFrom":"","inheritedFrom":"math_expressions.Literal.getConstantValue","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.num","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}