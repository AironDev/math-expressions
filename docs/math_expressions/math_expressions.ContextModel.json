{"name":"ContextModel","qualifiedName":"math_expressions/math_expressions.ContextModel","comment":"<p>The context model keeps track of all known variables and functions.</p>\n<p>It is structured hierarchically to offer nested scopes.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"parentScope":{"name":"parentScope","qualifiedName":"math_expressions/math_expressions.ContextModel.parentScope","comment":"<p>The parent scope.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"math_expressions/math_expressions.ContextModel","inner":[]}],"annotations":[]},"variables":{"name":"variables","qualifiedName":"math_expressions/math_expressions.ContextModel.variables","comment":"<p>Variable map of this scope (name -> expression).</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"math_expressions/math_expressions.Expression","inner":[]}]}],"annotations":[]},"functions":{"name":"functions","qualifiedName":"math_expressions/math_expressions.ContextModel.functions","comment":"<p>Function set of this scope.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.Set","inner":[{"outer":"math_expressions/math_expressions.MathFunction","inner":[]}]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"math_expressions/math_expressions.ContextModel.ContextModel-","comment":"<p>Creates a new, empty root context model.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"createChildScope":{"name":"createChildScope","qualifiedName":"math_expressions/math_expressions.ContextModel.createChildScope","comment":"<p>Returns a new child scope of this scope.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"math_expressions/math_expressions.ContextModel","inner":[]}],"parameters":{},"annotations":[]},"getExpression":{"name":"getExpression","qualifiedName":"math_expressions/math_expressions.ContextModel.getExpression","comment":"<p>Returns the bound expression for the given variable.\nPerforms recursive lookup through <code>parentScope</code>.</p>\n<p>Throws a <a>dart-core.StateError</a>, if variable is still unbound at the root scope.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"math_expressions/math_expressions.Expression","inner":[]}],"parameters":{"varName":{"name":"varName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getFunction":{"name":"getFunction","qualifiedName":"math_expressions/math_expressions.ContextModel.getFunction","comment":"<p>Returns the function for the given function name.\nPerforms recursive lookup through <code>parentScope</code>.</p>\n<p>Throws a <a>dart-core.StateError</a>, if function is still unbound at the root scope.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"math_expressions/math_expressions.MathFunction","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"bindVariable":{"name":"bindVariable","qualifiedName":"math_expressions/math_expressions.ContextModel.bindVariable","comment":"<p>Binds a variable to an expression in this context.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"v":{"name":"v","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.Variable","inner":[]}],"value":"null","annotations":[]},"e":{"name":"e","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.Expression","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"bindVariableName":{"name":"bindVariableName","qualifiedName":"math_expressions/math_expressions.ContextModel.bindVariableName","comment":"<p>Binds a variable name to an expression in this context.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"vName":{"name":"vName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"e":{"name":"e","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.Expression","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"bindFunction":{"name":"bindFunction","qualifiedName":"math_expressions/math_expressions.ContextModel.bindFunction","comment":"<p>Binds a function to this context.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.MathFunction","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"math_expressions/math_expressions.ContextModel.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"math_expressions/math_expressions.ContextModel.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>math_expressions/math_expressions.ContextModel.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"math_expressions/math_expressions.ContextModel.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"math_expressions/math_expressions.ContextModel.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>math_expressions/math_expressions.ContextModel.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>math_expressions/math_expressions.ContextModel.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"math_expressions/math_expressions.ContextModel.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"math_expressions/math_expressions.ContextModel.noSuchMethod","comment":"<p><a>math_expressions/math_expressions.ContextModel.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>math_expressions/math_expressions.ContextModel.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>math_expressions/math_expressions.ContextModel.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>math_expressions/math_expressions.ContextModel.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}