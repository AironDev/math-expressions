{"name":"Lexer","qualifiedName":"math_expressions/math_expressions.Lexer","comment":"<p>The lexer creates tokens (see <a>math_expressions/math_expressions.TokenType</a> and <a>math_expressions/math_expressions.Token</a>) from an input string.\nThe input string is expected to be in\n<a href=\"https://en.wikipedia.org/wiki/Infix_notation\">infix notation form</a>.\nThe lexer can convert an infix stream into a\n<a href=\"https://en.wikipedia.org/wiki/Reverse_Polish_notation\">postfix stream</a>\n(Reverse Polish Notation) for further processing by a <a>math_expressions/math_expressions.Parser</a>.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"keywords":{"name":"keywords","qualifiedName":"math_expressions/math_expressions.Lexer.keywords","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.Map","inner":[]}],"annotations":[]},"intBuffer":{"name":"intBuffer","qualifiedName":"math_expressions/math_expressions.Lexer.intBuffer","comment":"<p>Buffer for numbers</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"varBuffer":{"name":"varBuffer","qualifiedName":"math_expressions/math_expressions.Lexer.varBuffer","comment":"<p>Buffer for variable and function names</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"math_expressions/math_expressions.Lexer.Lexer-","comment":"<p>Creates a new lexer.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"tokenize":{"name":"tokenize","qualifiedName":"math_expressions/math_expressions.Lexer.tokenize","comment":"<p>Tokenizes a given input string.\nReturns a list of <a>math_expressions/math_expressions.Token</a> in infix notation.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"math_expressions/math_expressions.Token","inner":[]}]}],"parameters":{"inputString":{"name":"inputString","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"shuntingYard":{"name":"shuntingYard","qualifiedName":"math_expressions/math_expressions.Lexer.shuntingYard","comment":"<p>Transforms the lexer's token stream into RPN using the Shunting-yard\nalgorithm. Returns a list of <a>math_expressions/math_expressions.Token</a> in RPN form. Throws an\n<a>dart-core.ArgumentError</a> if the list is empty.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"math_expressions/math_expressions.Token","inner":[]}]}],"parameters":{"stream":{"name":"stream","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"math_expressions/math_expressions.Token","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]},"tokenizeToRPN":{"name":"tokenizeToRPN","qualifiedName":"math_expressions/math_expressions.Lexer.tokenizeToRPN","comment":"<p>This method invokes the createTokenStream methode to create an infix token\nstream and then invokes the shunting yard method to transform this stream\ninto a RPN (reverse polish notation) token stream.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"math_expressions/math_expressions.Token","inner":[]}]}],"parameters":{"inputString":{"name":"inputString","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"math_expressions/math_expressions.Lexer.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>math_expressions/math_expressions.Lexer.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"math_expressions/math_expressions.Lexer.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"math_expressions/math_expressions.Lexer.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>math_expressions/math_expressions.Lexer.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>math_expressions/math_expressions.Lexer.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"math_expressions/math_expressions.Lexer.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"math_expressions/math_expressions.Lexer.noSuchMethod","comment":"<p><a>math_expressions/math_expressions.Lexer.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>math_expressions/math_expressions.Lexer.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>math_expressions/math_expressions.Lexer.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>math_expressions/math_expressions.Lexer.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}