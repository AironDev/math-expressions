{"name":"Interval","qualifiedName":"math_expressions/math_expressions.Interval","comment":"<p>An <a>math_expressions/math_expressions.Interval</a> is defined by its minimum and maximum values, where\n<em>min &lt;= max</em>.</p>\n<p>This implementation offers basic interval arithmetic operations like\naddition, subtraction, multiplication and division. Operations always\nreturn a new interval and will not modify the existing ones. Additionally\nthis class implementions comparison relations for intervals.</p>\n<p>This implementation (partly) supports unbounded intervals with borders\nat +/- infinity and empty sets.</p>\n<p>Operator and comparison definitions are based on: \n<em>Bohlender, Gerd, and Ulrich Kulisch. 2010.\n<a href=\"http://interval.louisiana.edu/reliable-computing-journal/volume-15/no-1/reliable-computing-15-pp-36-42.pdf\">\"Deﬁnition of the Arithmetic Operations and Comparison Relations for an Interval Arithmetic Standard\"</a>.\nReliable Computing 15 (1): 36–42.</em></p>\n<p><strong>Note</strong>: This implementation does not offer a complete set of operations yet:</p><ul><li>No handling of unbounded intervals in operators.</li><li>No proper rounding.</li></ul>","isAbstract":false,"superclass":"dart-core.Object","implements":["dart-core.Comparable"],"subclass":[],"variables":{"min":{"name":"min","qualifiedName":"math_expressions/math_expressions.Interval.min","comment":"<p>Interval borders.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.num","inner":[]}],"annotations":[]},"max":{"name":"max","qualifiedName":"math_expressions/math_expressions.Interval.max","comment":"<p>Interval borders.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.num","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"math_expressions/math_expressions.Interval.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>math_expressions/math_expressions.Interval.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"dart-core.Object.hashCode","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"math_expressions/math_expressions.Interval.Interval-","comment":"<p>Creates a new interval with given borders.</p>\n<p>The parameter min must be smaller or equal than max for the interval\nto work properly.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"min":{"name":"min","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"max":{"name":"max","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"empty":{"name":"empty","qualifiedName":"math_expressions/math_expressions.Interval.Interval-empty","comment":"<p>Returns an immutable empty set.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"math_expressions/math_expressions.Interval","inner":[]}],"parameters":{},"annotations":[]}},"operators":{"+":{"name":"+","qualifiedName":"math_expressions/math_expressions.Interval.+","comment":"<p>Performs an interval addition.</p>\n<pre><code>[a, b] + [c, d] = [a + c, b + d]\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"i":{"name":"i","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.Interval","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"unary-":{"name":"unary-","qualifiedName":"math_expressions/math_expressions.Interval.unary-","comment":"<p>Unary minus on intervals.</p>\n<pre><code>-[a, b] = [-b, -a]\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"-":{"name":"-","qualifiedName":"math_expressions/math_expressions.Interval.-","comment":"<p>Performs an interval subtraction.</p>\n<pre><code>[a, b] + [c, d] = [a - d, b - c]\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"i":{"name":"i","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.Interval","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"*":{"name":"*","qualifiedName":"math_expressions/math_expressions.Interval.*","comment":"<p>Performs an interval multiplication.</p>\n<pre><code>[a, b] * [c, d] = [min(ac, ad, bc, bd), max(ac, ad, bc, bd)]\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"i":{"name":"i","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.Interval","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"/":{"name":"/","qualifiedName":"math_expressions/math_expressions.Interval./","comment":"<p>Performs an interval division.</p>\n<pre><code>[a, b] * [c, d] = [a, b] * (1/[c, d]) = [a, b] * [1/d, 1/c]\n</code></pre>\n<p><strong>Note:</strong> Does not handle division by zero and throws an <a>dart-core.ArgumentError</a> instead.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"i":{"name":"i","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.Interval","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"==":{"name":"==","qualifiedName":"math_expressions/math_expressions.Interval.==","comment":"<p>Equals operator on intervals.</p>\n<pre><code>[a, b] == [c, d], if a == c &amp;&amp; b == d\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"i":{"name":"i","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.Interval","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"<":{"name":"<","qualifiedName":"math_expressions/math_expressions.Interval.<","comment":"<p>Less than operator on intervals.</p>\n<pre><code>[a, b] &lt; [c, d], if a &lt; c &amp;&amp; b &lt; d\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"i":{"name":"i","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.Interval","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"<=":{"name":"<=","qualifiedName":"math_expressions/math_expressions.Interval.<=","comment":"<p>Less or equal than operator on intervals.</p>\n<pre><code>[a, b] &lt;= [c, d], if a &lt;= c &amp;&amp; b &lt;= d\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"i":{"name":"i","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.Interval","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},">":{"name":">","qualifiedName":"math_expressions/math_expressions.Interval.>","comment":"<p>Greater than operator on intervals.</p>\n<pre><code>[a, b] &gt; [c, d], if a &gt; c &amp;&amp; b &gt; d\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"i":{"name":"i","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.Interval","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},">=":{"name":">=","qualifiedName":"math_expressions/math_expressions.Interval.>=","comment":"<p>Greater or equal than operator on intervals.</p>\n<pre><code>[a, b] &gt;= [c, d], if a &gt;= c &amp;&amp; b &gt;= d\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"i":{"name":"i","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.Interval","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"glb":{"name":"glb","qualifiedName":"math_expressions/math_expressions.Interval.glb","comment":"<p>Returns the greatest lower bound.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"math_expressions/math_expressions.Interval","inner":[]}],"parameters":{"i":{"name":"i","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.Interval","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"lub":{"name":"lub","qualifiedName":"math_expressions/math_expressions.Interval.lub","comment":"<p>Returns the least upper bound.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"math_expressions/math_expressions.Interval","inner":[]}],"parameters":{"i":{"name":"i","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.Interval","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"includes":{"name":"includes","qualifiedName":"math_expressions/math_expressions.Interval.includes","comment":"<p>Inclusion relation. Returns true, if the given interval is included\nin this interval.</p>\n<pre><code>[a, b] subset of [c, d] &lt;=&gt; c &lt;= a &amp;&amp; b &gt;= d\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"i":{"name":"i","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.Interval","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"contains":{"name":"contains","qualifiedName":"math_expressions/math_expressions.Interval.contains","comment":"<p>Element-of relation. Returns true, if given element is included\nin this interval.\nDefined on a real number i and an interval:</p>\n<pre><code>i element of [a, b] &lt;=&gt; a &lt;= i &amp;&amp; i &lt;= b\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"containsZero":{"name":"containsZero","qualifiedName":"math_expressions/math_expressions.Interval.containsZero","comment":"<p>Returns true, if this interval contains zero (min &lt;= 0 &lt;= max).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isPositive":{"name":"isPositive","qualifiedName":"math_expressions/math_expressions.Interval.isPositive","comment":"<p>Returns true, if this interval is positive (min >= 0)</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isBound":{"name":"isBound","qualifiedName":"math_expressions/math_expressions.Interval.isBound","comment":"<p>Returns true, if neither min or max values are infinite.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isEmpty":{"name":"isEmpty","qualifiedName":"math_expressions/math_expressions.Interval.isEmpty","comment":"<p>Returns true, if this is the empty set.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"length":{"name":"length","qualifiedName":"math_expressions/math_expressions.Interval.length","comment":"<p>Returns the length of this interval.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.num","inner":[]}],"parameters":{},"annotations":[]},"toString":{"name":"toString","qualifiedName":"math_expressions/math_expressions.Interval.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"compareTo":{"name":"compareTo","qualifiedName":"math_expressions/math_expressions.Interval.compareTo","comment":"<p>Compares this object to another <a>dart-core.Comparable</a></p>\n<p>Returns a value like a <a>dart-core.Comparator</a> when comparing <code>this</code> to <a>math_expressions/math_expressions.Interval.compareTo.other</a>.\nThat is, it returns a negative integer if <code>this</code> is ordered before <a>math_expressions/math_expressions.Interval.compareTo.other</a>,\na positive integer if <code>this</code> is ordered after <a>math_expressions/math_expressions.Interval.compareTo.other</a>,\nand zero if <code>this</code> and <a>math_expressions/math_expressions.Interval.compareTo.other</a> are ordered together.</p>\n<p>The <a>math_expressions/math_expressions.Interval.compareTo.other</a> argument must be a value that is comparable to this object.</p>","commentFrom":"dart-core.Comparable.compareTo","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Comparable","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"math_expressions/math_expressions.Interval.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>math_expressions/math_expressions.Interval.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"math_expressions/math_expressions.Interval.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"math_expressions/math_expressions.Interval.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>math_expressions/math_expressions.Interval.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>math_expressions/math_expressions.Interval.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"math_expressions/math_expressions.Interval.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"math_expressions/math_expressions.Interval.noSuchMethod","comment":"<p><a>math_expressions/math_expressions.Interval.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>math_expressions/math_expressions.Interval.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>math_expressions/math_expressions.Interval.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>math_expressions/math_expressions.Interval.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"compareTo":{"name":"compareTo","qualifiedName":"math_expressions/math_expressions.Interval.compareTo","comment":"<p>Compares this object to another <a>dart-core.Comparable</a></p>\n<p>Returns a value like a <a>dart-core.Comparator</a> when comparing <code>this</code> to <a>math_expressions/math_expressions.Interval.compareTo.other</a>.\nThat is, it returns a negative integer if <code>this</code> is ordered before <a>math_expressions/math_expressions.Interval.compareTo.other</a>,\na positive integer if <code>this</code> is ordered after <a>math_expressions/math_expressions.Interval.compareTo.other</a>,\nand zero if <code>this</code> and <a>math_expressions/math_expressions.Interval.compareTo.other</a> are ordered together.</p>\n<p>The <a>math_expressions/math_expressions.Interval.compareTo.other</a> argument must be a value that is comparable to this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Comparable.compareTo","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Comparable.T","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}