{"name":"CompositeFunction","qualifiedName":"math_expressions/math_expressions.CompositeFunction","comment":"<p>A composition of two given <a>math_expressions/math_expressions.MathFunction</a>s.</p>","isAbstract":false,"superclass":"math_expressions/math_expressions.MathFunction","implements":[],"subclass":[],"variables":{"f":{"name":"f","qualifiedName":"math_expressions/math_expressions.CompositeFunction.f","comment":"<p>Members <code>f</code> and <code>g</code> of the composite function.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"math_expressions/math_expressions.MathFunction","inner":[]}],"annotations":[]},"g":{"name":"g","qualifiedName":"math_expressions/math_expressions.CompositeFunction.g","comment":"<p>Members <code>f</code> and <code>g</code> of the composite function.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"math_expressions/math_expressions.MathFunction","inner":[]}],"annotations":[]}},"inheritedVariables":{"name":{"name":"name","qualifiedName":"math_expressions/math_expressions.MathFunction.name","comment":"<p>Name of this function.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"args":{"name":"args","qualifiedName":"math_expressions/math_expressions.MathFunction.args","comment":"<p>List of arguments of this function. Arguments ust be of type <a>math_expressions/math_expressions.Variable</a>.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"math_expressions/math_expressions.Variable","inner":[]}]}],"annotations":[]}},"methods":{"setters":{},"getters":{"gDomainDimension":{"name":"gDomainDimension","qualifiedName":"math_expressions/math_expressions.CompositeFunction.gDomainDimension","comment":"<p>The domain of the 'second' function, which should match the range\nof the 'first function.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"domainDimension":{"name":"domainDimension","qualifiedName":"math_expressions/math_expressions.CompositeFunction.domainDimension","comment":"<p>The domain of the 'first' function.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"math_expressions/math_expressions.CompositeFunction.CompositeFunction-","comment":"<p>Creates a function composition.</p>\n<p>For example, given <code>f(x): R -&gt; R^3</code> and <code>g(x,y,z): R^3 -&gt; R</code>\nthe composition yields <code>(g Â° f)(x): R -&gt; R^3 -&gt; R</code>. First\n<code>f</code> is applied, then <code>g</code> is applied.</p>\n<p>Given some requirements</p>\n<pre><code>x = new Variable('x');\nxPlus = new Plus(x, 1);\nxMinus = new Minus(x, 1);\n\nfExpr = new Vector([x, xPlus, xMinus]);        // Transforms x to 3-dimensional vector\nf = new CustomFunction('f', [x], fExpr);       // Creates a function R -&gt; R^3 from fExpr\n\ny = new Variable('z');\nz = new Variable('y');\n\ngExpr = x + y + z;                             // Transforms 3-dimensional input to real value\ng = new CustomFunction('g', [x, y, z], gExpr)  // Creates a function R^3 -&gt; R from gExpr\n</code></pre>\n<p>a composition can be created as follows:</p>\n<pre><code>composite = new CompositeFunction(f, g); // R -&gt; R\n                                         // composite(2) = 6\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.MathFunction","inner":[]}],"value":"null","annotations":[]},"g":{"name":"g","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.MathFunction","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"derive":{"name":"derive","qualifiedName":"math_expressions/math_expressions.CompositeFunction.derive","comment":"<p>Derives this expression with respect to the given variable.</p>","commentFrom":"math_expressions.Expression.derive","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"math_expressions/math_expressions.Expression","inner":[]}],"parameters":{"toVar":{"name":"toVar","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"simplify":{"name":"simplify","qualifiedName":"math_expressions/math_expressions.CompositeFunction.simplify","comment":"<p>Simplifies both component functions.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"math_expressions/math_expressions.Expression","inner":[]}],"parameters":{},"annotations":[]},"evaluate":{"name":"evaluate","qualifiedName":"math_expressions/math_expressions.CompositeFunction.evaluate","comment":"<p>The EvaluationType of <code>f</code> is detected automatically based on\nthe domain dimension of <code>g</code>. This is because the input of\n<code>g</code> is the output of <code>f</code> (composite function).</p>\n<p>The given EvaluationType is used for <code>g</code> because there is no\ninformation on the expected output.</p>\n<p>Furthermore <code>g</code> is assigned a separate child scope of the given\n<code>context</code>, so that variable naming does not interfer with the\nevaluation.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.EvaluationType","inner":[]}],"value":"null","annotations":[]},"context":{"name":"context","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.ContextModel","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"math_expressions/math_expressions.CompositeFunction.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>math_expressions/math_expressions.CompositeFunction.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"math_expressions/math_expressions.CompositeFunction.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"domainDimension":{"name":"domainDimension","qualifiedName":"math_expressions/math_expressions.CompositeFunction.domainDimension","comment":"<p>The dimension of the domain of definition of this function.</p>","commentFrom":"","inheritedFrom":"math_expressions.MathFunction.domainDimension","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"math_expressions/math_expressions.CompositeFunction.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>math_expressions/math_expressions.CompositeFunction.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>math_expressions/math_expressions.CompositeFunction.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"+":{"name":"+","qualifiedName":"math_expressions/math_expressions.CompositeFunction.+","comment":"<p>Add operator. Creates a <a>math_expressions/math_expressions.Plus</a> expression.</p>","commentFrom":"","inheritedFrom":"math_expressions.Expression.+","static":false,"abstract":false,"constant":false,"return":[{"outer":"math_expressions/math_expressions.Expression","inner":[]}],"parameters":{"exp":{"name":"exp","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.Expression","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"-":{"name":"-","qualifiedName":"math_expressions/math_expressions.CompositeFunction.-","comment":"<p>Subtract operator. Creates a <a>math_expressions/math_expressions.Minus</a> expression.</p>","commentFrom":"","inheritedFrom":"math_expressions.Expression.-","static":false,"abstract":false,"constant":false,"return":[{"outer":"math_expressions/math_expressions.Expression","inner":[]}],"parameters":{"exp":{"name":"exp","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.Expression","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"*":{"name":"*","qualifiedName":"math_expressions/math_expressions.CompositeFunction.*","comment":"<p>Multiply operator. Creates a <a>math_expressions/math_expressions.Times</a> expression.</p>","commentFrom":"","inheritedFrom":"math_expressions.Expression.*","static":false,"abstract":false,"constant":false,"return":[{"outer":"math_expressions/math_expressions.Expression","inner":[]}],"parameters":{"exp":{"name":"exp","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.Expression","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"/":{"name":"/","qualifiedName":"math_expressions/math_expressions.CompositeFunction./","comment":"<p>Divide operator. Creates a <a>math_expressions/math_expressions.Divide</a> expression.</p>","commentFrom":"","inheritedFrom":"math_expressions.Expression./","static":false,"abstract":false,"constant":false,"return":[{"outer":"math_expressions/math_expressions.Expression","inner":[]}],"parameters":{"exp":{"name":"exp","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.Expression","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"^":{"name":"^","qualifiedName":"math_expressions/math_expressions.CompositeFunction.^","comment":"<p>Power operator. Creates a <a>math_expressions/math_expressions.Power</a> expression.</p>","commentFrom":"","inheritedFrom":"math_expressions.Expression.^","static":false,"abstract":false,"constant":false,"return":[{"outer":"math_expressions/math_expressions.Expression","inner":[]}],"parameters":{"exp":{"name":"exp","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.Expression","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"unary-":{"name":"unary-","qualifiedName":"math_expressions/math_expressions.CompositeFunction.unary-","comment":"<p>Unary minus operator. Creates a <a>math_expressions/math_expressions.UnaryMinus</a> expression.</p>","commentFrom":"","inheritedFrom":"math_expressions.Expression.unary-","static":false,"abstract":false,"constant":false,"return":[{"outer":"math_expressions/math_expressions.Expression","inner":[]}],"parameters":{},"annotations":[]},"&":{"name":"&","qualifiedName":"math_expressions/math_expressions.CompositeFunction.&","comment":"<p>Compose operator. Creates a <a>math_expressions/math_expressions.CompositeFunction</a>.</p>","commentFrom":"","inheritedFrom":"math_expressions.MathFunction.&","static":false,"abstract":false,"constant":false,"return":[{"outer":"math_expressions/math_expressions.MathFunction","inner":[]}],"parameters":{"g":{"name":"g","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.MathFunction","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"math_expressions/math_expressions.CompositeFunction.toString","comment":"<p>Returns a string version of this expression.\nSubclasses should override this method. The output should be kept\ncompatible with the <a>math_expressions/math_expressions.Parser</a>.</p>","commentFrom":"math_expressions.Expression.toString","inheritedFrom":"math_expressions.MathFunction.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"math_expressions/math_expressions.CompositeFunction.noSuchMethod","comment":"<p><a>math_expressions/math_expressions.CompositeFunction.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>math_expressions/math_expressions.CompositeFunction.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>math_expressions/math_expressions.CompositeFunction.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>math_expressions/math_expressions.CompositeFunction.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"derive":{"name":"derive","qualifiedName":"math_expressions/math_expressions.CompositeFunction.derive","comment":"<p>Derives this expression with respect to the given variable.</p>","commentFrom":"","inheritedFrom":"math_expressions.Expression.derive","static":false,"abstract":true,"constant":false,"return":[{"outer":"math_expressions/math_expressions.Expression","inner":[]}],"parameters":{"toVar":{"name":"toVar","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"simplify":{"name":"simplify","qualifiedName":"math_expressions/math_expressions.CompositeFunction.simplify","comment":"<p>Returns a simplified version of this expression.\nSubclasses should overwrite this method, if applicable.</p>","commentFrom":"","inheritedFrom":"math_expressions.Expression.simplify","static":false,"abstract":false,"constant":false,"return":[{"outer":"math_expressions/math_expressions.Expression","inner":[]}],"parameters":{},"annotations":[]},"evaluate":{"name":"evaluate","qualifiedName":"math_expressions/math_expressions.CompositeFunction.evaluate","comment":"<p>Evaluates this expression according to given type and context.</p>","commentFrom":"","inheritedFrom":"math_expressions.Expression.evaluate","static":false,"abstract":true,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.EvaluationType","inner":[]}],"value":"null","annotations":[]},"context":{"name":"context","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.ContextModel","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getParam":{"name":"getParam","qualifiedName":"math_expressions/math_expressions.CompositeFunction.getParam","comment":"<p>Returns the i-th parameter of this function (0-based).</p>","commentFrom":"","inheritedFrom":"math_expressions.MathFunction.getParam","static":false,"abstract":false,"constant":false,"return":[{"outer":"math_expressions/math_expressions.Variable","inner":[]}],"parameters":{"i":{"name":"i","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getParamByName":{"name":"getParamByName","qualifiedName":"math_expressions/math_expressions.CompositeFunction.getParamByName","comment":"<p>Returns the parameter with the given name.</p>","commentFrom":"","inheritedFrom":"math_expressions.MathFunction.getParamByName","static":false,"abstract":false,"constant":false,"return":[{"outer":"math_expressions/math_expressions.Variable","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"toFullString":{"name":"toFullString","qualifiedName":"math_expressions/math_expressions.CompositeFunction.toFullString","comment":"<p>Returns the full string representation of this function.\nThis could include the name, variables and expression.</p>\n<p>Any subclass should decide whether to override this method.</p>","commentFrom":"","inheritedFrom":"math_expressions.MathFunction.toFullString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}