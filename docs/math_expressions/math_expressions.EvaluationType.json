{"name":"EvaluationType","qualifiedName":"math_expressions/math_expressions.EvaluationType","comment":"<p>Mathematical expressions must be evaluated under a certain <a>math_expressions/math_expressions.EvaluationType</a>.</p>\n<p>Currently there are three types, but not all expressions support each type.\nIf you try to evaluate an expression with an unsupported type, it will raise an\n<a>math_expressions/dart-core.UnimplementedError</a> or <a>math_expressions/dart-core.UnsupportedError</a>.</p><ul><li>REAL</li><li>VECTOR</li><li>INTERVAL</li></ul>\n<p><strong>Note</strong>: This class emulates an enumeration, since they are not supported\nby Dart yet.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"type":{"name":"type","qualifiedName":"math_expressions/math_expressions.EvaluationType.type","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"REAL_INT":{"name":"REAL_INT","qualifiedName":"math_expressions/math_expressions.EvaluationType.REAL_INT","comment":"<p>Internal integer value for REAL type.</p>","final":true,"static":true,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"VECTOR_INT":{"name":"VECTOR_INT","qualifiedName":"math_expressions/math_expressions.EvaluationType.VECTOR_INT","comment":"<p>Internal integer value for VECTOR type.</p>","final":true,"static":true,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"INTERVAL_INT":{"name":"INTERVAL_INT","qualifiedName":"math_expressions/math_expressions.EvaluationType.INTERVAL_INT","comment":"<p>Internal integer value for INTERVAL type.</p>","final":true,"static":true,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"REAL":{"name":"REAL","qualifiedName":"math_expressions/math_expressions.EvaluationType.REAL","comment":"<p>Public constructor for REAL types. Always returns the same instance of a REAL type.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"math_expressions/math_expressions.EvaluationType","inner":[]}],"parameters":{},"annotations":[]},"VECTOR":{"name":"VECTOR","qualifiedName":"math_expressions/math_expressions.EvaluationType.VECTOR","comment":"<p>Public constructor for VECTOR types. Always returns the same instance of a VECTOR type.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"math_expressions/math_expressions.EvaluationType","inner":[]}],"parameters":{},"annotations":[]},"INTERVAL":{"name":"INTERVAL","qualifiedName":"math_expressions/math_expressions.EvaluationType.INTERVAL","comment":"<p>Public constructor for INTERVAL types. Always returns the same instance of a INTERVAL type.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"math_expressions/math_expressions.EvaluationType","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"math_expressions/math_expressions.EvaluationType.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>math_expressions/math_expressions.EvaluationType.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"dart-core.Object.hashCode","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"math_expressions/math_expressions.EvaluationType.==","comment":"<p>Two types are equal, if their internal int matches.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"et":{"name":"et","optional":false,"named":false,"default":false,"type":[{"outer":"math_expressions/math_expressions.EvaluationType","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"math_expressions/math_expressions.EvaluationType.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"math_expressions/math_expressions.EvaluationType.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>math_expressions/math_expressions.EvaluationType.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"math_expressions/math_expressions.EvaluationType.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"math_expressions/math_expressions.EvaluationType.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>math_expressions/math_expressions.EvaluationType.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>math_expressions/math_expressions.EvaluationType.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"math_expressions/math_expressions.EvaluationType.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"math_expressions/math_expressions.EvaluationType.noSuchMethod","comment":"<p><a>math_expressions/math_expressions.EvaluationType.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>math_expressions/math_expressions.EvaluationType.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>math_expressions/math_expressions.EvaluationType.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>math_expressions/math_expressions.EvaluationType.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}