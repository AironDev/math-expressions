{"name":"TokenType","qualifiedName":"math_expressions/math_expressions.TokenType","comment":"<p>A token type. Access token types via the static fields.</p>\n<p>For example, to access the token type PLUS:</p>\n<pre><code>plusType = TokenType.PLUS;\n</code></pre>\n<p>The type defines the <code>priority</code> (precedence) of the token.</p>\n<pre><code>(+,-) &lt; (*,/) &lt; (^) &lt; functions &lt; (-u)\n</code></pre>\n<p>It also defines the associativity of the token. True stands for\nleft-associative, false for right-associative.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"VAR":{"name":"VAR","qualifiedName":"math_expressions/math_expressions.TokenType.VAR","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"math_expressions/math_expressions.TokenType","inner":[]}],"annotations":[]},"VAL":{"name":"VAL","qualifiedName":"math_expressions/math_expressions.TokenType.VAL","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"math_expressions/math_expressions.TokenType","inner":[]}],"annotations":[]},"LBRACE":{"name":"LBRACE","qualifiedName":"math_expressions/math_expressions.TokenType.LBRACE","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"math_expressions/math_expressions.TokenType","inner":[]}],"annotations":[]},"RBRACE":{"name":"RBRACE","qualifiedName":"math_expressions/math_expressions.TokenType.RBRACE","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"math_expressions/math_expressions.TokenType","inner":[]}],"annotations":[]},"SEPAR":{"name":"SEPAR","qualifiedName":"math_expressions/math_expressions.TokenType.SEPAR","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"math_expressions/math_expressions.TokenType","inner":[]}],"annotations":[]},"PLUS":{"name":"PLUS","qualifiedName":"math_expressions/math_expressions.TokenType.PLUS","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"math_expressions/math_expressions.TokenType","inner":[]}],"annotations":[]},"MINUS":{"name":"MINUS","qualifiedName":"math_expressions/math_expressions.TokenType.MINUS","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"math_expressions/math_expressions.TokenType","inner":[]}],"annotations":[]},"TIMES":{"name":"TIMES","qualifiedName":"math_expressions/math_expressions.TokenType.TIMES","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"math_expressions/math_expressions.TokenType","inner":[]}],"annotations":[]},"DIV":{"name":"DIV","qualifiedName":"math_expressions/math_expressions.TokenType.DIV","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"math_expressions/math_expressions.TokenType","inner":[]}],"annotations":[]},"POW":{"name":"POW","qualifiedName":"math_expressions/math_expressions.TokenType.POW","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"math_expressions/math_expressions.TokenType","inner":[]}],"annotations":[]},"UNMINUS":{"name":"UNMINUS","qualifiedName":"math_expressions/math_expressions.TokenType.UNMINUS","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"math_expressions/math_expressions.TokenType","inner":[]}],"annotations":[]},"SQRT":{"name":"SQRT","qualifiedName":"math_expressions/math_expressions.TokenType.SQRT","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"math_expressions/math_expressions.TokenType","inner":[]}],"annotations":[]},"ROOT":{"name":"ROOT","qualifiedName":"math_expressions/math_expressions.TokenType.ROOT","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"math_expressions/math_expressions.TokenType","inner":[]}],"annotations":[]},"LOG":{"name":"LOG","qualifiedName":"math_expressions/math_expressions.TokenType.LOG","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"math_expressions/math_expressions.TokenType","inner":[]}],"annotations":[]},"LN":{"name":"LN","qualifiedName":"math_expressions/math_expressions.TokenType.LN","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"math_expressions/math_expressions.TokenType","inner":[]}],"annotations":[]},"COS":{"name":"COS","qualifiedName":"math_expressions/math_expressions.TokenType.COS","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"math_expressions/math_expressions.TokenType","inner":[]}],"annotations":[]},"SIN":{"name":"SIN","qualifiedName":"math_expressions/math_expressions.TokenType.SIN","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"math_expressions/math_expressions.TokenType","inner":[]}],"annotations":[]},"TAN":{"name":"TAN","qualifiedName":"math_expressions/math_expressions.TokenType.TAN","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"math_expressions/math_expressions.TokenType","inner":[]}],"annotations":[]},"EFUNC":{"name":"EFUNC","qualifiedName":"math_expressions/math_expressions.TokenType.EFUNC","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"math_expressions/math_expressions.TokenType","inner":[]}],"annotations":[]},"value":{"name":"value","qualifiedName":"math_expressions/math_expressions.TokenType.value","comment":"<p>The string value of this token type.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"priority":{"name":"priority","qualifiedName":"math_expressions/math_expressions.TokenType.priority","comment":"<p>The priority of this token type.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"leftAssociative":{"name":"leftAssociative","qualifiedName":"math_expressions/math_expressions.TokenType.leftAssociative","comment":"<p>Associativity of this token type. true = left.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"operator":{"name":"operator","qualifiedName":"math_expressions/math_expressions.TokenType.operator","comment":"<p>True, if this token is an operator.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"function":{"name":"function","qualifiedName":"math_expressions/math_expressions.TokenType.function","comment":"<p>True, if this token is a function.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"toString":{"name":"toString","qualifiedName":"math_expressions/math_expressions.TokenType.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"math_expressions/math_expressions.TokenType.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>math_expressions/math_expressions.TokenType.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"math_expressions/math_expressions.TokenType.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"math_expressions/math_expressions.TokenType.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>math_expressions/math_expressions.TokenType.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>math_expressions/math_expressions.TokenType.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"math_expressions/math_expressions.TokenType.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"math_expressions/math_expressions.TokenType.noSuchMethod","comment":"<p><a>math_expressions/math_expressions.TokenType.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>math_expressions/math_expressions.TokenType.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>math_expressions/math_expressions.TokenType.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>math_expressions/math_expressions.TokenType.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}